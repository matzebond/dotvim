priority -1

extends c

priority 0

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = (snip.basename or "file") + '.hpp'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1}>
endsnippet

snippet ns "namespace .. (namespace)" b
namespace ${1:`!p snip.rv = snip.basename or "name"`}
{
  ${VISUAL}${0}
} /* namespace $1 */
endsnippet

snippet enum "Enumeration" b
enum class ${1:name} : ${2:int}
{
  ${VISUAL}${0}
};
endsnippet

snippet cl "class .. (class)" b
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:/* arguments */});
	virtual ~${1/(\w+).*/$1/} ();`!p snip.rv='\n'`
private:
	${0:/* data */}
};
endsnippet

snippet mfunc "member function" b
${1:void} ${2:`!p snip.rv = snip.basename or "ClassName"`}::${3:function_name}(${4})${5}
{
	${VISUAL}${0}
}
endsnippet

snippet ?: "ternary" i
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet fore "foreach with auto c++11" b
for (auto ${2:item} : ${1:container})
{
  ${VISUAL}${0}
}
endsnippet

snippet fore& "foreach with auto& c++11" b
for (auto& ${2:item} : ${1:container})
{
  ${VISUAL}${0}
}
endsnippet

snippet forit "for with iterator" b
for (${1:std::vector}<${2:T}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4)
{
  ${VISUAL}${0}
}
endsnippet

snippet forau "for with auto iterator" b
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1)
{
  ${VISUAL}${0}
}
endsnippet

snippet switch "switch block" b
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

snippet switchndef "switch without default" b
switch (${1:/* variable */})
{
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}
endsnippet

snippet case "case block" b
case ${1:/* variable case */}:
	${0}
	${2:break;}
endsnippet

snippet try "try catch" b
try
{
  ${VISUAL}${0}
}
catch (${1:std::exception} ${2:e})
{

}
endsnippet

snippet cout "std::cout + std::endl" b
std::cout << ${1} << std::endl;
endsnippet

snippet cerr "std::cerr + std::endl" b
std::cerr << ${1} << std::endl;
endsnippet

snippet cin "std::cin" b
std::cin >> ${1};
endsnippet

snippet tp "template <typename ..>" b
template <typename ${1}> $0
endsnippet

snippet stack "std::stack"
std::stack<${1:T}> $0
endsnippet

snippet queue "std::queue"
std::queue<${1:T}> $0
endsnippet

snippet array "std::array"
std::array<${1:T}, ${2:N}> $0
endsnippet

snippet vec "std::vector"
std::vector<${1:T}> $0
endsnippet

snippet deque "std::deque"
std::deque<${1:T}> $0
endsnippet

snippet flist "std::forward_list"
std::forward_list<${1:T}> $0
endsnippet

snippet list "std::list"
std::list<${1:T}> $0
endsnippet

snippet set "std::set"
std::set<${1:T}> $0
endsnippet

snippet map "std::map"
std::map<${1:K}, ${2:V}> $0
endsnippet

snippet mset "std::multiset"
std::multiset<${1:T}> $0
endsnippet

snippet mmap "std::multimap"
std::multimap<${1:Key}, ${2:T}> $0
endsnippet

snippet uset "std::unordered_set"
std::unordered_set<${1:T}> $0
endsnippet

snippet umap "std.:unordered_set"
std::unordered_map<${1:Key}, ${2:T}> $0
endsnippet

snippet umset "std::unordered_multiset"
std::unordered_multiset<${1:T}> $0
endsnippet

snippet ummap "std::unordered_multimap"
std::unordered_multimap<${1:Key}, ${2:T}> $0
endsnippet

snippet pqueue "std::priority_queue"
std::priority_queue<${1:T}> $0
endsnippet

snippet uptr "std::unique_ptr"
std::unique_ptr<${1:T}> $0
endsnippet

snippet sptr "std::shared_ptr"
std::shared_ptr<${1:T}> $0
endsnippet

snippet wptr "std::weak_ptr"
std::weak_ptr<${1:T}> $0
endsnippet

snippet str "std::string"
std::string $0
endsnippet

snippet scast "static_cast"
static_cast<${1:T}>(${VISUAL}${0})
endsnippet

snippet ccast "const_cast"
const_cast<${1:T}>(${VISUAL}${0})
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
char buf[1024];
while(size_t len = fread(buf, 1, sizeof(buf), fp))
v.insert(v.end(), buf, buf + len);
fclose(fp);
}
endsnippet

snippet getset "getter and setter" b
void set${1:Variable}(const ${2:T}& value);
const $2& get$1() const;
endsnippet

snippet mgetset "member getter and setter" b
void ${1:`!p snip.rv = snip.basename or "name"`}::set${2:Variable}(const ${3:T}& value)
{
  ${4:$2} = value;
}
const $3& $1::get$2() const
{
  return ${4};
}
endsnippet

snippet ctor "Constructor in cpp" b
${1:`!p snip.rv = snip.basename or "class"`}::$1(${2})
{
  $0
}
endsnippet

snippet dtor "Destructor in cpp" b
${1:`!p snip.rv = snip.basename or "class"`}::~$1()
{
  $0
}
endsnippet

snippet source "build source file" b
#include "${1:`!p snip.rv = snip.basename or "file"`}.hpp"

namespace ${2:`!p snip.rv = snip.basename or "name"`}
{
  ${3:$1}::$3(${4})
  {
  }

  $3::~$3()
  {
  }
} /* namespace $2 */
endsnippet
# vim:ft=snippets:
